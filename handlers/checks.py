import asyncio
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from config import dp, bot, base, admins

from keyboards.client import *
from states.client import *
from states.forms import *

@dp.message_handler(content_types=['location'])
async def get_free_checks(message: types.Message, state: FSMContext):
    user_longitude = message.location.longitude
    user_latitude = message.location.latitude
    longitude1 = user_longitude - 3
    longitude2 = user_longitude + 3
    latitude1 = user_latitude - 3
    latitude2 = user_latitude + 3
    checks = await base.get_available_checks(latitude1, longitude1, latitude2, longitude2)
    names = {"mts": "–°–∞–ª–æ–Ω —Å–≤—è–∑–∏", "sokolov": "–Æ–≤–µ–ª–∏—Ä–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", "gate31": "–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã", "irbis": "–ê–ó–°",
             "kastorama": "–ì–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "muztorg": "–ú–∞–≥–∞–∑–∏–Ω –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"}
    if len(checks):
        await message.answer("üìå<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä—è–¥–æ–º —Å –≤–∞–º–∏</b>", reply_markup=check_kb)
        for check in checks:
            await message.answer(f"<b>üìé–ù–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> <code>{check[0]}</code>\n"
                                 f"<b>üìç–ê–¥—Ä–µ—Å:</b> {check[1]}\n"
                                 f"<b>üàö–¢–∏–ø:</b> {names[check[2]]}")
            await asyncio.sleep(0.2)
    else:
        await message.answer("<b>‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>")

@dp.message_handler(Text("üìé–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"))
async def appoint_check(message: types.Message, state: FSMContext):
    await message.answer("<b>üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏</b>", reply_markup=cancel_kb)
    await FSMassignation.number.set()

@dp.message_handler(state=FSMassignation.number)
async def get_appoint_number(message: types.Message, state: FSMContext):
    try:
        is_check_assignated = await base.assignate_check(message.from_user.id, int(message.text))
        if is_check_assignated:
            await message.answer(f"<b>‚úÖ–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{message.text}</code> —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</b>")
            await base.add_log(message.from_user.id, message.text, '–ù–∞–∑–Ω–∞—á–∏–ª')
        else:
            await message.answer(f"<b>‚ùå–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–∞ –Ω–µ—ë –Ω–∞–∑–Ω–∞—á–µ–Ω –¥—Ä—É–≥–æ–π –¢–ü</b>")
    except ValueError:
        await message.answer("<b>‚ùå–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>")
    finally:
        await state.finish()

@dp.message_handler(Text("üìÑ–ú–æ–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"))
async def get_user_checks(message: types.Message, state: FSMContext):
    user_checks = await base.get_user_checks(int(message.from_user.id))
    if len(user_checks):
        await message.answer("<b>üìî–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:</b>", reply_markup=my_checks_kb)
        for check in user_checks:
            await message.answer(f"<b>üìé–ù–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> <code>{check[0]}</code>\n"
                                 f"<b>üìç–ê–¥—Ä–µ—Å:</b> {check[1]}\n", reply_markup=await get_cancel_check_kb(check[0]))
    else:
        await message.answer("<b>‚ùå–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫</b>")

@dp.callback_query_handler(Text(startswith="uncheck_"))
async def cancel_check(call: types.CallbackQuery):
    check_id = call.data.split("_")[1]
    await base.cancel_check(check_id)
    await call.message.edit_text("‚úÖ–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await base.add_log(call.from_user.id, check_id, '–û—Ç–º–µ–Ω–∏–ª')

@dp.message_handler(Text("üìã–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
async def fill_form(message: types.Message, state: FSMContext):
    await message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏</b>", reply_markup=cancel_kb)
    await FSMgetnumberofcheck.number.set()

@dp.message_handler(state=FSMgetnumberofcheck.number)
async def get_number_of_check_to_fill(message: types.Message, state: FSMContext):
    companies_states = {"mts": FSMmts.date, "sokolov": FSMsokolov.date, "gate31": FSMgate31.date, "irbis": FSMirbis.date, "muztorg": FSMmuztorg.date, "kastorama": FSMkastorama.date}
    try:
        company = await base.is_user_have_check(message.from_user.id, int(message.text))
        await companies_states[company].set()
        async with state.proxy() as data_check:
            data_check['company'] = company
            data_check['user_id'] = message.from_user.id
            data_check['number'] = int(message.text)
            data_check['date_time'] = datetime.now()
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏</b>")
        await asyncio.sleep(300)
        if 'date' not in (await state.get_data()).keys():
            await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")
    except ValueError:
        await message.answer("<b>‚ùå–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>")
        await state.finish()

@dp.message_handler(state=FSMsokolov.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMsokolov.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.time_start and 'time_start' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.time_start)
async def getting_time_start(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['time_start'] = message.text
    await FSMsokolov.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = message.audio.file_id
    await FSMsokolov.next()
    await message.answer('–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.name_worker and 'worker_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.name_worker)
async def getting_fio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_name'] = message.text
    await FSMsokolov.next()
    await message.answer("–¢–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ –≤ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω")
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.number_workers and 'worker_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.number_workers)
async def getting_worker_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_count'] = message.text
    await FSMsokolov.next()
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π (–∫–ª–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞) –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ –≤ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω")
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.number_clients and 'client_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.number_clients)
async def getting_client_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['client_count'] = message.text
        data_check['edit_message_id'] = \
            (await message.answer("–ù–∞ –º–æ–º–µ–Ω—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –∑–∞–Ω—è—Ç—ã –ª–∏—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏ (–Ω–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Å–≤–æ–∏–º –º–∞–∫–∏—è–∂–µ–º –∏ –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –ø–∏—â—É)",
                                  reply_markup=grade_kb)).message_id
    await FSMsokolov.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.worker_job and 'worker_job' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsokolov.worker_job)
async def getting_worker_job(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_job'] = call.data.split("_")[1]
        await call.message.edit_text("–ü—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ª–æ–∂–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π", reply_markup=grade_kb)
    await FSMsokolov.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.worker_substrate and 'worker_substrate' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsokolov.worker_substrate)
async def getting_worker_substrate(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_substrate'] = call.data.split("_")[1]
        await call.message.edit_text("–ü—Ä–æ–¥–∞–≤–µ—Ü –±—ã–ª –≤–æ–≤–ª–µ—á–µ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —Ö–æ—Ç–µ–ª –ø–æ–º–æ—á—å, —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª –∫ —Å–µ–±–µ, "
                                     "–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —É–ª—ã–±–∞–ª—Å—è. –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö", reply_markup=grade_kb)
    await FSMsokolov.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.worker_friendliness and 'worker_friendliness' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsokolov.worker_friendliness)
async def getting_worker_friendliness(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_friendliness'] = call.data.split("_")[1]
        await call.message.edit_text("–ü–æ –∏—Ç–æ–≥–∞–º –≤–∏–∑–∏—Ç–∞ —Å–ª–æ–∂–∏–ª–æ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –≤—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö", reply_markup=grade_kb)
    await FSMsokolov.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.worker_service and 'worker_service' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsokolov.worker_service)
async def getting_worker_service(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_service'] = call.data.split("_")[1]
        await base.add_log(call.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª')
        await call.message.edit_text(f"–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check['number']} - –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
    await base.add_check("sokolov", state)
    await state.finish()


@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=FSMsokolov.audio)
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMmts.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMmts.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.time_start and 'time_start' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.time_start)
async def getting_time_start(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['time_start'] = message.text
    await FSMmts.next()
    await message.answer('–°–∞–ª–æ–Ω —Ä–∞–±–æ—Ç–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.rezgim and 'rezgim' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.rezgim)
async def getting_rezgim(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['rezgim'] = message.text
    await FSMmts.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø—Ä–∏—Å—É—Ç—Å–≤–æ–≤–∞–≤—à–∏—Ö –≤–æ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.number_workers and 'number_workers' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.number_workers)
async def getting_number_workers(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['number_workers'] = int(message.text)
    await FSMmts.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏—Å—É—Ç—Å–≤–æ–≤–∞–≤—à–∏—Ö –≤–æ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.number_clients and 'number_clients' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.number_clients)
async def getting_number_clients(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['number_clients'] = int(message.text)
    await FSMmts.next()
    await message.answer(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –ò–º—è –∏ –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—Ç–µ - –Ω–∞–ø–∏—à–∏—Ç–µ: –Ω–µ –ø–æ–º–Ω—é. –§–æ—Ä–º–∞—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.name_worker and 'name_worker' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.name_worker)
async def getting_name_worker(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['name_worker'] = message.text
    await FSMmts.next()
    await message.answer('–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.describe_worker and 'describe_worker' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.describe_worker)
async def getting_describe_worker(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['describe_worker'] = message.text
    await FSMmts.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤–∏–∑–∏—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.resume and 'resume' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.resume)
async def getting_resume(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['resume'] = message.text
    await FSMmts.next()
    await message.answer('–ü—Ä–∏—à–∏–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = message.audio.file_id
    await FSMmts.next()
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞ —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.photo1 and 'photo1' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.photo1, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo1'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMmts.next()
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.photo2 and 'photo2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.photo2, content_types=types.ContentType.PHOTO)
async def getting_photo2(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo2'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
        await base.add_log(message.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª')
    await base.add_check("mts", state)
    await message.answer(f'–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check["number"]} -- –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', reply_markup=main_kb)
    await state.finish()

@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=[FSMmts.photo2, FSMmts.photo1])
async def photo_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=FSMmts.audio)
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMgate31.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMgate31.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = message.audio.file_id
    await FSMgate31.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.photo and 'photo' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.photo, content_types=types.ContentType.PHOTO)
async def getting_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMgate31.next()
    await message.answer("–§–ò–û –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)")
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.operator_name and 'operator_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.operator_name)
async def getting_operator_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['operator_name'] = message.text
    await FSMgate31.next()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–µ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –≤—ã–≤–µ—Å–∫—É, –≤—Ö–æ–¥–Ω—É—é –≥—Ä—É–ø–ø—É, –≤–∏—Ç—Ä–∏–Ω—ã, –º–∞–Ω–µ–∫–µ–Ω—ã, —á–∏—Å—Ç–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.outside and 'outside' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.outside)
async def getting_outside(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['outside'] = message.text
    await FSMgate31.next()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –¢–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª, –ø—Ä–∏–º–µ—Ä–æ—á–Ω—ã–µ, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —á–∏—Å—Ç–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    if await state.get_state() == FSMgate31.inside and 'inside' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.inside)
async def getting_inside(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['inside'] = message.text
    await FSMgate31.next()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.describe_worker and 'describe_worker' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.describe_worker)
async def getting_describe_worker(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['describe_worker'] = message.text
    await message.answer("–¢–æ–≤–∞—Ä –∏–º–µ–µ—Ç –æ–ø—Ä—è—Ç–Ω—ã–π –≤–∏–¥, –∏–º–µ—é—Ç—Å—è –º–∞–≥–Ω–∏—Ç–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.product_appearance and 'product_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.product_appearance)
async def getting_product_appearance(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['product_appearance'] = message.text
        await message.answer("–í –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∂–∫–∞ –¥–ª—è –æ–±—É–≤–∏ –∏ –≤–µ—à–∞–ª–∫–∞", reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.spoon and 'spoon' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.spoon)
async def getting_spoon(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['spoon'] = message.text
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ")
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_count and 'worker_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.worker_count)
async def getting_worker_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_count'] = message.text
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ")
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.client_count and 'client_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.client_count)
async def getting_client_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['client_count'] = message.text
        await message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –í–∞—Å —Å —É–ª—ã–±–∫–æ–π", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_friendliess and 'consultant_friendliess' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_friendliess)
async def getting_consultant_friendliess(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_friendliess'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–æ–≤–æ–¥–∏–ª –¥–æ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π ", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_fitting and 'consultant_fitting' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_fitting)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_fitting'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–∞–º –æ—Ç–Ω–µ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø—Ä–∏–º–µ—Ä–æ—á–Ω—É—é", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_products and 'consultant_products' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_products)
async def getting_consultant_products(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_products'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–æ–≤–µ–ª –∫ –∫–∞—Å—Å–æ–≤–æ–π –∑–æ–Ω–µ", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_cash and 'consultant_cash' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_cash)
async def getting_consultant_cash(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_cash'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–æ–∂–¥–∞–ª—Å—è –æ–ø–ª–∞—Ç—ã (–¥–ª—è —É–Ω–∏–≤–µ—Ä–º–∞–≥–∞ "–¶–≤–µ—Ç–Ω–æ–π", –¢–†–¶ "–ê–≤–∏–∞–ø–∞—Ä–∫", –¢–¶ "–ú–ï–ì–ê –¢–µ–ø–ª—ã–π —Å—Ç–∞–Ω")', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_payment and 'consultant_payment' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_payment)
async def getting_consultant_payment(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_payment'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π –æ–±—Å–ª—É–∂–∏–≤–∞–ª —Ç–æ—Ç –∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, —á—Ç–æ –ø—Ä–æ–≤–æ–¥–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_same and 'consultant_same' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_same)
async def getting_consultant_same(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_same'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ò–º—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –ø–æ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π ")
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.duty_name and 'duty_name' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.duty_name)
async def getting_duty_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['duty_name'] = message.text
        await message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç/–¥–µ–∂—É—Ä–Ω—ã–π –ø–æ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ—â–µ–π –¥–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ—Ä–∫–∏", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_product_count and 'consultant_product_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_product_count)
async def getting_consultant_product_count(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_product_count'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç/–¥–µ–∂—É—Ä–Ω—ã–π –ø–æ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_closeness and 'consultant_closeness' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_closeness)
async def getting_consultant_closeness(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_closeness'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–§–ò–û –∫–∞—Å—Å–∏—Ä–∞ (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)')
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.cashier_name and 'cashier_name' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.cashier_name)
async def getting_cashier_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_name'] = message.text
        await message.answer("–ö–∞—Å—Å–∏—Ä –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –í–∞—Å —Å —É–ª—ã–±–∫–æ–π", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.cashier_friendliess and 'cashier_friendliess' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_friendliess)
async def getting_cashier_friendliess(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_friendliess'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–∞—Å—Å–∏—Ä/–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–∞–≤–µ—Ä–Ω—É–ª –ø–æ–∫—É–ø–∫—É –≤ –∫–∞–ª—å–∫—É (—É–ø–∞–∫–æ–≤–æ—á–Ω—É—é –±—É–º–∞–≥—É) –∏ –ø–æ–ª–æ–∂–∏–ª –≤ –ø–∞–∫–µ—Ç', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.cashier_paper and 'cashier_paper' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.cashier_paper)
async def getting_cashier_paper(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_paper'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–∞—Å—Å–∏—Ä/–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–µ—Ä–µ–¥–∞–ª –ø–∞–∫–µ—Ç –≤ —Ä—É–∫–∏, –≤—ã–π–¥—è –∏–∑-–∑–∞ –∫–∞—Å—Å—ã (–Ω–µ —á–µ—Ä–µ–∑ –∫–∞—Å—Å–æ–≤—É—é —Å—Ç–æ–π–∫—É)', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.cashier_handed and 'cashier_handed' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.cashier_handed)
async def getting_cashier_handed(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_handed'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.general_impression and 'general_impression' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.general_impression)
async def getting_general_impression(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['general_impression'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_friendliess and 'worker_friendliess' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.worker_friendliess)
async def getting_worker_friendliess(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_friendliess'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_activity and 'consultant_activity' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_activity)
async def getting_consultant_activity(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_activity'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_competence and 'worker_competence' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.worker_competence)
async def getting_worker_competence(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_competence'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_persistence and 'worker_persistence' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.worker_persistence)
async def getting_worker_persistence(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_persistence'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É–¥–µ–ª–∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∫–∏', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_time and 'worker_time' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.worker_time)
async def getting_worker_time(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_time'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ï—Å–ª–∏ –ª–∏ –∂–µ–ª–∞–Ω–∏–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –µ—â–µ –ø–æ–∫—É–ø–∫–∏?', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.return_desire and 'return_desire' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.return_desire)
async def getting_return_desire(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['return_desire'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –ø—Ä–æ–≤–æ–¥–∏–≤—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)')
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.back_name and 'back_name' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.back_name)
async def getting_back_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['back_name'] = message.text
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –í–∞—Å —Å —É–ª—ã–±–∫–æ–π", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.back_friendliess and 'back_friendliess' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.back_friendliess)
async def getting_back_friendliess(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['back_friendliess'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞')
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.back_main and 'back_main' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.back_main)
async def getting_back_main(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['back_main'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer(f"–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check['number']} - –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        await base.add_log(call.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª')
    await base.add_check("gate31", state)
    await state.finish()

@dp.message_handler(state=FSMgate31.photo, content_types=[types.ContentType.TEXT, types.ContentType.AUDIO])
async def photo_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMgate31.photo, content_types=[types.ContentType.TEXT, types.ContentType.PHOTO])
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMirbis.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMirbis.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = message.audio.file_id
    await FSMirbis.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.photo and 'photo' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.photo)
async def getting_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMirbis.next()
    await message.answer("–ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ê–ó–° (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)")
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.operator_name and 'operator_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.operator_name)
async def getting_operator_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['operator_name'] = message.text
    await FSMirbis.next()
    await message.answer("–ò–º—è –∑–∞–ø—Ä–∞–≤—â–∏–∫–∞ –ê–ó–° (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)")
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.azs_name and 'azs_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.azs_name)
async def getting_azs_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['azs_name'] = message.text
    await FSMirbis.next()
    await message.answer("–ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏")
    if await state.get_state() == FSMirbis.column and 'column' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.column)
async def getting_column(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['column'] = message.text
    await FSMirbis.next()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –ê–ó–° –∏ —Ç–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª. –í–µ–∑–¥–µ –ª–∏ –±—ã–ª–æ —á–∏—Å—Ç–æ, –≤—Å—ë –ª–∏ –∏—Å–ø—Ä–∞–≤–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.territory and 'territory' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.territory)
async def getting_territory(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['territory'] = message.text
    await message.answer("–¢—É–∞–ª–µ—Ç —á–∏—Å—Ç—ã–π, –≤ —Ç—É–∞–ª–µ—Ç–µ —Ö–æ—Ä–æ—à–∏–π –∑–∞–ø–∞—Ö, –≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.sanuzel and 'sanuzel' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.sanuzel)
async def getting_sanuzel(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['sanuzel'] = message.text
        await message.answer("–ù–∞—Å–∫–æ–ª—å–∫–æ –í—ã –¥–æ–≤–æ–ª—å–Ω—ã –æ–±—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ?", reply_markup=grade_kb)
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.situation and 'situation' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMirbis.situation)
async def getting_situation(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['situation'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ß—Ç–æ –±—ã –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.object_tips and 'object_tips' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.object_tips)
async def getting_object_tips(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['object_tips'] = message.text
        await message.answer("–ö–∞–∫ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —Å –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.main_problem and 'main_problem' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.main_problem)
async def getting_main_problem(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['main_problem'] = message.text
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ —Ä–∞–±–æ—Ç—É –∑–∞–ø—Ä–∞–≤—â–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.filler_job and 'filler_job' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.filler_job)
async def getting_filler_job(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['filler_job'] = message.text
        await message.answer("–ù–∞—Å–∫–æ–ª—å–∫–æ –í—ã –¥–æ–≤–æ–ª—å–Ω—ã —ç—Ç–∞–ø–æ–º –∑–∞–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", reply_markup=grade_kb)
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.fill and 'fill' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMirbis.fill)
async def getting_fill(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['fill'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ß—Ç–æ –±—ã –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ —É–ª—É—á—à–∏—Ç—å –ø—Ä–∏ –∑–∞–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.fill_tips and 'fill_tips' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.fill_tips)
async def getting_fill_tips(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['fill_tips'] = message.text
        await message.answer("–ö–∞–∫ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —Å –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å? ")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.fill_problem and 'fill_problem' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.fill_problem)
async def getting_fill_problem(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['fill_problem'] = message.text
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∫–∞—Å—Å–∏—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.cashier_appearance and 'cashier_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.cashier_appearance)
async def getting_cashier_appearance(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_appearance'] = message.text
        await message.answer("–ù–∞—Å–∫–æ–ª—å–∫–æ –í—ã –¥–æ–≤–æ–ª—å–Ω—ã —Ä–∞–±–æ—Ç–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∫–∞—Å—Å–∏—Ä–∞?", reply_markup=grade_kb)
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.cashier_job and 'cashier_job' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMirbis.cashier_job)
async def getting_cashier_job(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_job'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ß—Ç–æ –±—ã –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ —Ä–∞–±–æ—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∫–∞—Å—Å–∏—Ä–∞?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.cashier_tips and 'cashier_tips' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.cashier_tips)
async def getting_cashier_tips(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_tips'] = message.text
        await message.answer("–ö–∞–∫ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —Å –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∫–∞—Å—Å–∏—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.cashier_problem and 'cashies_problem' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.cashier_problem)
async def getting_cashier_problem(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_problem'] = message.text
        await message.answer(f"–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check['number']} - –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        await base.add_log(message.from_user.id, data_check['number'], '–ù–∞–∑–Ω–∞—á–∏–ª')
    await base.add_check("irbis", state)
    await state.finish()

@dp.message_handler(state=FSMirbis.photo, content_types=[types.ContentType.AUDIO, types.ContentType.TEXT])
async def photo_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMirbis.photo, content_types=[types.ContentType.PHOTO, types.ContentType.TEXT])
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMmuztorg.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMmuztorg.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = message.audio.file_id
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ñ–∞—Å–∞–¥–∞ –º–∞–≥–∞–∑–∏–Ω–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.photo1 and 'photo1' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.photo1, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo1'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞—Ä—É—à–µ–Ω–∏–π')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.photo2 and 'photo2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.photo2, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo2'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_count and 'worker_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_count)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_count'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∑–∞–ª–µ')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.client_count and 'client_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.client_count)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['client_count'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–æ–ª')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.sex and 'sex' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.sex)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['sex'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.age and 'age' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.age)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['age'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ–¥–æ—à–µ–ª –∫ –í–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç –í–∞—à–µ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –µ–≥–æ –ø–æ–ª–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_3_minute and 'worker_3_minute' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_3_minute)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_3_minute'] = message.text
    await FSMmuztorg.next()
    await message.answer('–§–ò–û –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_name and 'worker_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_name)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_name'] = message.text
    await FSMmuztorg.next()
    await message.answer('–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_appearance and 'worker_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_appearance)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_appearance'] = message.text
    await FSMmuztorg.next()
    await message.answer('–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.hall_appearance and 'hall_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.hall_appearance)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['hall_appearance'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –±—ã–ª –ø—Ä–∏–≤–µ—Ç–ª–∏–≤ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –í–∞–º, –∫–∞–∫ –∫ –∫–ª–∏–µ–Ω—Ç—É?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.consultant_friendly and 'consultant_friendly' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.consultant_friendly)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_friendly'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª —Å –í–∞–º–∏?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.other_consultant and 'other_consultant' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.other_consultant)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['other_consultant'] = message.text
    await FSMmuztorg.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.general_impression and 'general_impression' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.general_impression)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['general_impression'] = message.text
    await FSMmuztorg.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.consultant_activity and 'consultant_activity' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.consultant_activity)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_activity'] = message.text
    await FSMmuztorg.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_competence and 'worker_competence' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_competence)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_competence'] = message.text
        await base.add_log(message.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª')
    await base.add_check("muztorg", state)
    await message.answer(f'–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check["number"]} -- –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', reply_markup=main_kb)
    await state.finish()

@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=[FSMmuztorg.photo2, FSMmuztorg.photo1])
async def photo_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=FSMmuztorg.audio)
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMkastorama.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMkastorama.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.time and 'time' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.time)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['time'] = message.text
    await FSMkastorama.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = message.audio.file_id
    await FSMmts.next()
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.photo and 'photo' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.photo, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMmts.next()
    await message.answer('–ü–∞—Ä–∫–æ–≤–∫–∞ —á–∏—Å—Ç–∞—è (–Ω–µ—Ç –º—É—Å–æ—Ä–∞, –Ω–µ—Ç —Ç–µ–ª–µ–∂–µ–∫ –Ω–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, —É–±—Ä–∞–Ω–æ –æ—Ç —Å–Ω–µ–≥–∞)', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.parking_clear and 'parking_clear' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.parking_clear)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['parking_clear'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ù–∞ –ø–∞—Ä–∫–æ–≤–∫–µ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.parking_free and 'parking_free' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.parking_free)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['parking_free'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ù–∞ –≤—Ö–æ–¥–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–µ–ª–µ–∂–∫–∏ –≤—Å–µ—Ö –≤–∏–¥–æ–≤", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.carts and 'carts' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.carts)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['carts'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í —Ç—É–∞–ª–µ—Ç–∞—Ö —á–∏—Å—Ç–æ", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.toilets_clear and 'toilets_clear' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.toilets_clear)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['toilets_clear'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ó–∞–º–∫–∏ –≤–æ –≤—Å–µ—Ö —Ç—É–∞–ª–µ—Ç–Ω—ã—Ö –∫–∞–±–∏–Ω–∫–∞—Ö —Ü–µ–ª—ã–µ", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.zamki and 'zamki' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.zamki)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['zamki'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í—Å—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.santehnika and 'santehnika' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.santehnika)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['santehnika'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–õ–µ–≥–∫–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏ –∑–∞–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–∞–∫–∞–∑—ã", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.info and 'info' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.info)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü–æ –≥–ª–∞–≤–Ω–æ–π –∞–ª–ª–µ–µ –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–∂–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è —Å —Ç–µ–ª–µ–∂–∫–æ–π", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cart_alley and 'cart_alley' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cart_alley)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cart_alley'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ ‚Ññ –∫–∞—Å—Å–æ–≤–æ–≥–æ —É–∑–ª–∞", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cash_number and 'cash_number' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.cash_number)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cash_number'] = message.text
    await FSMkastorama.next()
    await message.answer('–§–ò–û –∫–∞—Å—Å–∏—Ä–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_name and 'cashier_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.cashier_name)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_name'] = message.text
    await FSMkastorama.next()
    await message.answer('–ö–∞–∫–æ–π –í—ã –ø–æ —Å—á–µ—Ç—É –≤ –æ—á–µ—Ä–µ–¥–∏?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.queue_number and 'queue_number' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.queue_number)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['queue_number'] = message.text
    await FSMkastorama.next()
    await message.answer('–ó–∞—Å–µ–∫–∏—Ç–µ –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∫ –í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –≤ –∫–∞—Å—Å—É –∏ –¥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –∫–∞—Å—Å–∏—Ä –≤—ã–¥–∞–ª –í–∞–º —á–µ–∫ (–º–∏–Ω.)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.queue_time and 'queue_time' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.queue_time)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['queue_time'] = message.text
    await FSMkastorama.next()
    await message.answer('–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–∞—Å—Å–∏—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, –±–µ–π–¥–∂ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ñ–æ—Ä–º–∞ —á–∏—Å—Ç–∞—è, –æ—Ç–≥–ª–∞–∂–µ–Ω–Ω–∞—è. –ï—Å–ª–∏ –±—ã–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_appearance and 'cashier_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.cashier_appearance)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_appearance'] = message.text
    await FSMkastorama.next()
    await message.answer('–†–∞–±–æ—Ç–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ –í–∞—Å)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.worker_job_client and 'worker_job_client' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.worker_job_client)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_job_client'] = message.text
    await FSMkastorama.next()
    await message.answer('–ö–∞—Å—Å–∏—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–µ–¥—ä—è–≤–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ –≤–µ—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, –≤—ã–ª–æ–∂–∏–≤ –µ–≥–æ –Ω–∞ –∫–∞—Å—Å–æ–≤—ã–π –ø—Ä–∏–ª–∞–≤–æ–∫ (–∫—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —Ç–µ–ª–µ–∂–∫–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º –∫ –∫–∞—Å—Å–∏—Ä—É)', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_correctly and 'cashier_correctly' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_correctly)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_correctly'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–õ–µ–≥–∫–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏ –∑–∞–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–∞–∫–∞–∑—ã", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_barcode and 'cashier_barcode' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_correctly)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_correctly'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –ò–õ–ò –≤–≤–µ–ª —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é, –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Å–∫–∞–Ω–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_barcode and 'cashier_barcode' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_barcode)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_barcode'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–µ–Ω–µ–≥ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∫–∞—Å—Å–∏—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞—Ö –∫—É–ø—é—Ä –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ø—é—Ä—ã ¬´–Ω–∞ –æ—â—É–ø—å¬ª", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_solvency and 'cashier_solvency' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_solvency)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_solvency'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä –≤—ã–¥–∞–ª —Å–¥–∞—á—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤–º–µ—Å—Ç–µ —Å —á–µ–∫–æ–º", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_change and 'cashier_change' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_change)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_change'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–†–∞–±–æ—Ç–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (–ü—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –í–∞—Å)")
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_job_user and 'cashier_job_user' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.cashier_job_user)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_job_user'] = message.text
    await FSMkastorama.next()
    await message.answer('–ö–∞—Å—Å–∏—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_positive and 'cashier_positive' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_positive)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_change'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_help and 'cashier_help' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_help)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_help'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–£–ª—ã–±–∞–µ—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ò–õ–ò –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –±–µ–∑ —è–≤–Ω–æ–π –Ω–∞–∏–≥—Ä–∞–Ω–Ω–æ–π —É–ª—ã–±–∫–∏")
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_benevolence and 'cashier_benevolence' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_help)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_benevolence'] = call.data.split("_")[1]
        await call.message.edit_text(f"–°–ø–∞—Å–∏–±–æ. –ê–Ω–∫–µ—Ç–∞ - {data_check['number']} –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
        await base.add_check("kastorama", data_check)
        await base.add_log(call.from_user.id, data_check['number'], "–í–∑—è–ª")
    await state.finish()

